/*
 * EID's of group members
 * 
 */
import java.util.concurrent.Semaphore; // for implementation using Semaphores

public class CyclicBarrier {
	private int n;
	private int count;
	private Semaphore s1;
	private Semaphore s2;
	private int parties;
	
	
	
	public CyclicBarrier(int parties) {
		this.parties = parties;
		Semaphore s = new Semaphore(parties, true);
		// Creates a new CyclicBarrier that will trip when
		// the given number of parties (threads) are waiting upon it
	}
	
	public int await() throws InterruptedException {
		int index = 0;
		int houseParty = parties;
		parties--;
		index = houseParty - parties;
		
		// Waits until all parties have invoked await on this barrier.
		// If the current thread is not the last to arrive then it is
		// disabled for thread scheduling purposes and lies dormant until
		// the last thread arrives.
		// Returns: the arrival index of the current thread, where index
		// (parties - 1) indicates the first to arrive and zero indicates
		// the last to arrive.   
		
		
		
          // you need to write this code
	    return index;
	}
}
